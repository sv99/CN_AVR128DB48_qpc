<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Blinky}-->
  <class name="Blinky" superclass="qpc::QActive">
   <!--${AOs::Blinky::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::Blinky::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Blinky::SM::initial}-->
    <initial target="../1">
     <action>(void)par; /* unused parameter */
/* arm the private time event to expire in 1/2s
* and periodically every 1/2 second
*/
QTimeEvt_armX(&amp;me-&gt;timeEvt,
    BSP_TICKS_PER_SEC,
    BSP_TICKS_PER_SEC);</action>
     <initial_glyph conn="2,3,5,1,20,4,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Blinky::SM::off}-->
    <state name="off">
     <entry>logger_P(LOG_MSG_LED_ON);
BSP_onboardLedOff ();</entry>
     <!--${AOs::Blinky::SM::off::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,14,3,1,18,6,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,16,11">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <!--${AOs::Blinky::SM::on}-->
    <state name="on">
     <entry>logger_P(LOG_MSG_LED_OFF);
//logger(&quot;LED OFF&quot;);
BSP_onboardLedOn ();</entry>
     <!--${AOs::Blinky::SM::on::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,28,3,1,20,-18,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,18,16,12">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="46,47"/>
   </statechart>
  </class>
  <!--${AOs::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky *me = (Blinky *)AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::blinky.c}-->
  <file name="blinky.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &quot;logger.h&quot;    /* Board Support Package interface */

#include &quot;blinky.h&quot;

const Q_ROM char LOG_MSG_LED_OFF[] = &quot;Led Off&quot;;
const Q_ROM char LOG_MSG_LED_ON[] = &quot;Led On&quot;;



/* instantiate the Blinky active object ------------------------------------*/
static Blinky l_blinky;
QActive * const AO_Blinky = &amp;l_blinky.super;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Blinky_ctor}
$define${AOs::Blinky}</text>
  </file>
  <!--${.::blinky.h}-->
  <file name="blinky.h">
   <text>#ifndef BLINKY_H
#define BLINKY_H

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    Q_BUTTON_PRESSED_SIG,
    /* add more signals here... */
    MAX_SIG  /* the last signal */
};

//void Blinky_ctor(void);
extern QActive * const AO_Blinky;

//============================================================================
// declare all AO classes...
$declare${AOs::Blinky}

$declare${AOs::Blinky_ctor}

#endif // BLINKY_H</text>
  </file>
 </directory>
</model>
